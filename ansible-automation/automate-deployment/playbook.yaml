- name: Create new instance and add new instance's public IP address
  hosts: local
  connection: local
  become: true
  gather_facts: false
  vars_files:
    - variables.yaml
  
  tasks:   
    - name: Install packages
      ansible.builtin.pip:
        name: 
          - botocore
          - boto3

    - name: create key pair using key_material obtained using 'file' lookup plugin
      amazon.aws.ec2_key:
        name: my-github-key
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: eu-north-1
        key_material: "ssh-rsa {{ ssh_public_key }}" #{{ lookup('file', '~/.ssh/id_rsa_github.pub') }}
      #no_log: true
    
    - name: Just get the list from default pip before
      community.general.pip_package_info:
    
    - name: Install petname package
      ansible.builtin.pip:
        name: 
          - xkcdpass
          #- petname

    - name: Just get the list from default pip after
      community.general.pip_package_info:

    - name: Generate random words
      ansible.builtin.debug:
        #var: lookup('community.general.random_pet')
        var: lookup('community.general.random_words')

    - name: Access AWS using an iam user credentials
      amazon.aws.ec2_instance:
        name: "{{ lookup('community.general.random_pet') }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        key_name: "my-github-key"
        instance_type: t3.micro
        security_group: launch-wizard-2
        image_id: ami-0914547665e6a707c
        region: eu-north-1
        network:
          assign_public_ip: true
      register: ec2

    - debug:
        msg: "{{ec2}}" 

    - name: Add new host to group 'aws_host'
      ansible.builtin.add_host:
        name: "{{ ec2.instances[0].public_dns_name }}"
        groups: aws_host

- name: Automate deployment for Restaurant website
  hosts: aws_host
  become: true
  vars:
    arch_mapping:  # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64

  tasks:
    - name: Update packages
      ansible.builtin.apt:
        update_cache: yes

    - name: Install required packages
      ansible.builtin.apt:
        pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - python3-pip
        - gnupg
        - software-properties-common

    - name: Create directory for Docker's GPG key
      file: 
        path: /etc/apt/keyrings
        state: directory
        mode: '0755' 

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
        state: present

    - name: Print architecture variables
      ansible.builtin.debug:
        msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        filename: docker
        state: present

    - name: Install Docker and related packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - docker-ce
        - containerd.io

    - name: Install Docker Module for Python
      ansible.builtin.pip:
        name: 
          #- docker
          - docker==6.1.3
          - docker-compose
          # downgrade requests
          - requests==2.31.0

    - name: Add Docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add user to Docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Enable and start Docker services
      ansible.builtin.systemd_service:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker
        - containerd
    - ansible.builtin.debug: 
        var: status
    
    - name: Log into DockerHub
      community.docker.docker_login:
        username: "{{ docker_username }}"
        password: "{{ docker_token }}"
        api_version: "1.44"
      register: login_results
    - ansible.builtin.debug: 
        var: login_results

    # This task pull multiple images that was indicated in loop
    - name: Pull Docker Images
      community.general.docker_image:
        name:  "{{ item }}"
        source: pull 
      loop:
        - iamfrancesjoffany/upskill-devops:webserver
        - iamfrancesjoffany/upskill-devops:php-fpm
        - iamfrancesjoffany/upskill-devops:mysql
    
    - name: Create and start services
      community.docker.docker_compose:
        project_name: serve_restaurant
        definition:
          services:
            webserver:
              image: iamfrancesjoffany/upskill-devops:webserver
              container_name: webserver
              volumes:
                - restaurant-data:/var/www/restaurant-css-framework
              ports:
                - "80:80"
              networks:
                - restaurant
              depends_on:
                - php-fpm
                - mysql

            php-fpm:
              image: iamfrancesjoffany/upskill-devops:php-fpm
              container_name: php-fpm
              environment:
                - mysql-server-name=mysql
                - mysql-server-passwd=root
              volumes:
                - restaurant-data:/var/www/restaurant-css-framework:ro
              networks:
                - restaurant
              depends_on:
                - mysql

            mysql:
              image: iamfrancesjoffany/upskill-devops:mysql
              container_name: mysql
              ports:
                - "3306:3306"
              networks:
                - restaurant

          volumes:
              restaurant-data:

          networks:
              restaurant:
                name: restaurant-network

      register: output      